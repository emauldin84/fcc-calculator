{"version":3,"sources":["components/Keypad.js","components/Display.js","components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Keypad","result","setResult","action","setAction","appliedValue","setAppliedValue","useState","isResult","setIsResult","handleSetResult","val","includes","prevVal","length","handleSetAction","act","handleSetAppliedValue","handleSetValues","handleClear","handleCalculate","value","Number","eval","handleValueFlip","replace","className","id","onClick","Display","Calculator","equation","setEquation","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2fAEMA,OAAS,SAATA,OAAU,MAA2E,IAA1EC,OAAyE,KAAzEA,OAAQC,UAAiE,KAAjEA,UAAWC,OAAsD,KAAtDA,OAAQC,UAA8C,KAA9CA,UAAWC,aAAmC,KAAnCA,aAAcC,gBAAqB,KAArBA,gBAAqB,UACtDC,qDAAS,GAD6C,gNAC/EC,SAD+E,cACrEC,YADqE,cAGhFC,gBAAkB,SAACC,GACrB,IAAIH,SAAS,CAMT,GALY,MAARG,GAAgBV,OAAOW,SAAS,MAChCV,WAAU,SAAAW,GACN,OAAOA,EAAUF,KAGb,MAARA,GAA6B,MAAdV,OAAO,IAAgC,IAAlBA,OAAOa,OAC3C,OAEQ,MAARH,GAA6B,MAAdV,OAAO,IAA4B,IAAdA,OAAO,IAC3CC,WAAU,SAAAW,GACN,OAAOA,EAAUF,KAGb,MAARA,GAAuB,MAARA,GAA6B,MAAdV,OAAO,GACrCC,UAAUS,GAEG,MAARA,GACLT,WAAU,SAAAW,GACN,OAAOA,EAAUF,KAI1BH,WACa,MAARG,GAAgBV,OAAOW,SAAS,KAInB,MAARD,IACLT,UAAUS,GACVF,aAAY,KALZP,UAAUS,GACVF,aAAY,MAQlBM,gBAAkB,SAACC,GACjBf,QAAUI,cAGC,MAAXJ,QAEIG,UADQ,MAARY,GAA0B,MAAXb,OACL,IAEAa,IAKhBC,sBAAwB,SAACN,GACf,MAARA,GAAgBV,OAAOW,SAAS,MAChCN,iBAAgB,SAAAO,GACZ,OAAOA,EAAUF,KAEX,MAARA,GAAuB,MAARA,GAAmC,MAApBN,aAAa,GAC7CC,gBAAgBK,GACD,MAARA,GACPL,iBAAgB,SAAAO,GACZ,OAAOA,EAAUF,MAIvBO,gBAAkB,SAACP,GAClBR,QACCc,sBAAsBN,GAEtBR,QACAO,gBAAgBC,IAGlBQ,YAAc,WAChBjB,UAAU,KACVE,UAAU,IACVE,gBAAgB,KAEdc,gBAAkB,SAAlBA,kBACF,GAAGnB,QAAUE,QAAUE,aAAc,CACjCF,OAAoB,MAAXA,OAAiB,IAAiB,SAAXA,OAAiB,IAAMA,OACvD,IAAIkB,MAAK,UAAMC,OAAOrB,QAAb,YAAwBE,OAAxB,YAAkCE,cAC3CH,UAAU,GAAD,OAAIqB,KAAKF,SAClBjB,UAAU,IACVE,gBAAgB,IAChBG,aAAY,KAGde,gBAAkB,WAChBrB,SACAmB,OAAOrB,QAAU,EAAIC,UAAU,IAAD,OAAKD,SAAYC,UAAUD,OAAOwB,QAAQ,IAAI,MAE7EtB,SACCmB,OAAOjB,cAAgB,EAAIC,gBAAgB,IAAD,OAAKD,eAAkBC,gBAAgBD,aAAaoB,QAAQ,IAAI,OAIlH,OACI,kEAAKC,UAAU,UACX,kEAAKA,UAAU,WACX,qEAAQC,GAAG,QAAQC,QAAST,aAA5B,MACA,qEAAQS,QAASJ,iBAAjB,OACA,qEAAQG,GAAG,SAASC,QAAS,kBAAMb,gBAAgB,UAAnD,SAEJ,kEAAKW,UAAU,WACX,qEAAQC,GAAG,QAAQC,QAAS,kBAAIV,gBAAgB,OAAhD,KACA,qEAAQS,GAAG,QAAQC,QAAS,kBAAIV,gBAAgB,OAAhD,KACA,qEAAQS,GAAG,OAAOC,QAAS,kBAAIV,gBAAgB,OAA/C,KACA,qEAAQS,GAAG,WAAWC,QAAS,kBAAMb,gBAAgB,OAArD,MAEJ,kEAAKW,UAAU,aACX,qEAAQC,GAAG,OAAOC,QAAS,kBAAIV,gBAAgB,OAA/C,KACA,qEAAQS,GAAG,OAAOC,QAAS,kBAAIV,gBAAgB,OAA/C,KACA,qEAAQS,GAAG,MAAMC,QAAS,kBAAIV,gBAAgB,OAA9C,KACA,qEAAQS,GAAG,WAAWC,QAAS,kBAAMb,gBAAgB,OAArD,MAEJ,kEAAKW,UAAU,YACX,qEAAQC,GAAG,MAAMC,QAAS,kBAAIV,gBAAgB,OAA9C,KACA,qEAAQS,GAAG,MAAMC,QAAS,kBAAIV,gBAAgB,OAA9C,KACA,qEAAQS,GAAG,QAAQC,QAAS,kBAAIV,gBAAgB,OAAhD,KACA,qEAAQS,GAAG,MAAMC,QAAS,kBAAMb,gBAAgB,OAAhD,MAEJ,kEAAKW,UAAU,YACX,qEAAQC,GAAG,OAAOC,QAAS,kBAAIV,gBAAgB,OAA/C,KACA,qEAAQS,GAAG,UAAUC,QAAS,kBAAIV,gBAAgB,OAAlD,KACA,qEAAQS,GAAG,SAASC,QAASR,iBAA7B,QAMDpB,8B,sKCzHA6B,EATC,SAAC,GAAoC,IAAnC5B,EAAkC,EAAlCA,OAAQI,EAA0B,EAA1BA,aAAcF,EAAY,EAAZA,OACpC,OACI,yBAAKuB,UAAU,WACX,uBAAGA,UAAU,cAAcC,GAAG,UAAUxB,GACxC,uBAAGuB,UAAU,cAAcC,GAAG,WAAWxB,GAAUE,EAAeA,EAAeJ,K,OCsB9E6B,EAvBI,WAAO,IAAD,EACWvB,mBAAS,MADpB,mBACdwB,EADc,KACJC,EADI,OAEOzB,mBAAS,IAFhB,mBAEdJ,EAFc,KAENC,EAFM,OAGOG,mBAAS,KAHhB,mBAGdN,EAHc,KAGNC,EAHM,OAImBK,mBAAS,IAJ5B,mBAIdF,EAJc,KAIAC,EAJA,KAKrB,OACI,yBAAKoB,UAAU,cACX,kBAAC,EAAD,CAASzB,OAAQA,EAAQE,OAAQA,EAAQE,aAAcA,IACvD,kBAACL,EAAA,EAAD,CACIC,OAAQA,EACRC,UAAWA,EACXC,OAAQA,EACRC,UAAWA,EACXC,aAAcA,EACdC,gBAAiBA,EAEjByB,SAAUA,EACVC,YAAaA,MCTdC,MARf,WACE,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,QCIcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e6728828.chunk.js","sourcesContent":["import React, {useState} from 'react'\n\nconst Keypad = ({result, setResult, action, setAction, appliedValue, setAppliedValue}) => {\n    const [isResult, setIsResult] = useState(false)\n    \n    const handleSetResult = (val) => {\n        if(!isResult){\n            if (val === '.' && !result.includes('.')){\n                setResult(prevVal => {\n                    return prevVal + val\n                })\n            } \n            if (val === '0' && result[0] === '0' && result.length === 1){\n                return\n            } \n            if (val === '0' && result[0] === '0' && result[1] !== 0){\n                setResult(prevVal => {\n                    return prevVal + val\n                })\n            } \n            if (val !== '.' && val !== '0' && result[0] === '0'){\n                setResult(val)\n            }\n            else if (val !== '.'){\n                setResult(prevVal => {\n                    return prevVal + val\n                })\n            }\n        }\n        if(isResult){\n            if (val === '.' && !result.includes('.')){\n                setResult(val)\n                setIsResult(false)\n            } \n            else if (val !== '.'){\n                setResult(val)\n                setIsResult(false)\n            }\n        }\n    }\n    const handleSetAction = (act) => {\n        if (result && appliedValue){\n            return\n        }\n        if (result !== '0') {\n            if (act === '-' && action === '-'){\n                setAction('+')\n            } else {\n                setAction(act)\n\n            }\n        }\n    }\n    const handleSetAppliedValue = (val) => {\n        if (val === '.' && !result.includes('.')){\n            setAppliedValue(prevVal => {\n                return prevVal + val\n            })\n        } if (val !== '.' && val !== '0' && appliedValue[0] === '0'){\n            setAppliedValue(val)\n        } else if (val !== '.'){\n            setAppliedValue(prevVal => {\n                return prevVal + val\n            })\n        }\n    }\n    const handleSetValues = (val) => {\n        if(action){\n            handleSetAppliedValue(val)\n        }\n        if(!action){\n            handleSetResult(val)\n        }\n    }\n    const handleClear = () => {\n        setResult('0')\n        setAction('')\n        setAppliedValue('')\n    }\n    const handleCalculate = () => {\n        if(result && action && appliedValue) {\n            action = action === 'x' ? '*' : action === 'รท' ? '/' : action\n            let value = `${Number(result)} ${action} ${appliedValue}`\n            setResult(`${eval(value)}`)\n            setAction('')\n            setAppliedValue('')\n            setIsResult(true)\n        }\n    }\n    const handleValueFlip = () => {\n        if(!action){\n            Number(result) > 0 ? setResult(`-${result}`) : setResult(result.replace('-',''))\n        }\n        if(action){\n            Number(appliedValue) > 0 ? setAppliedValue(`-${appliedValue}`) : setAppliedValue(appliedValue.replace('-',''))\n        }\n    }\n\n    return (\n        <div className='keypad'>\n            <div className='row-one'>\n                <button id=\"clear\" onClick={handleClear}>AC</button>\n                <button onClick={handleValueFlip}>+/-</button>\n                <button id=\"divide\" onClick={() => handleSetAction('รท')}>รท</button>\n            </div>\n            <div className='row-two'>\n                <button id=\"seven\" onClick={()=>handleSetValues('7')}>7</button>\n                <button id=\"eight\" onClick={()=>handleSetValues('8')}>8</button>\n                <button id=\"nine\" onClick={()=>handleSetValues('9')}>9</button>\n                <button id=\"multiply\" onClick={() => handleSetAction('x')}>x</button>\n            </div>\n            <div className='row-three'>\n                <button id=\"four\" onClick={()=>handleSetValues('4')}>4</button>\n                <button id=\"five\" onClick={()=>handleSetValues('5')}>5</button>\n                <button id=\"six\" onClick={()=>handleSetValues('6')}>6</button>\n                <button id=\"subtract\" onClick={() => handleSetAction('-')}>-</button>\n            </div>\n            <div className='row-four'>\n                <button id=\"one\" onClick={()=>handleSetValues('1')}>1</button>\n                <button id=\"two\" onClick={()=>handleSetValues('2')}>2</button>\n                <button id=\"three\" onClick={()=>handleSetValues('3')}>3</button>\n                <button id=\"add\" onClick={() => handleSetAction('+')}>+</button>\n            </div>\n            <div className='row-five'>\n                <button id=\"zero\" onClick={()=>handleSetValues('0')}>0</button>\n                <button id=\"decimal\" onClick={()=>handleSetValues('.')}>.</button>\n                <button id=\"equals\" onClick={handleCalculate}>=</button>\n            </div>\n        </div>\n    )\n}\n\nexport default Keypad","import React from 'react'\n\nconst Display = ({result, appliedValue, action}) => {\n    return (\n        <div className=\"display\">\n            <p className='displaytext' id='action'>{action}</p>\n            <p className='displaytext' id=\"display\">{action && appliedValue ? appliedValue : result}</p>\n        </div>\n    )\n}\n\nexport default Display","import React, { useState } from 'react'\n\nimport Display from './Display'\nimport Keypad from './Keypad'\n\nconst Calculator = () => {\n    const [equation, setEquation] = useState(null)\n    const [action, setAction] = useState('')\n    const [result, setResult] = useState('0')\n    const [appliedValue, setAppliedValue] = useState('')\n    return (\n        <div className='calculator'>\n            <Display result={result} action={action} appliedValue={appliedValue}/>\n            <Keypad \n                result={result} \n                setResult={setResult}\n                action={action}\n                setAction={setAction}\n                appliedValue={appliedValue}\n                setAppliedValue={setAppliedValue}\n\n                equation={equation}\n                setEquation={setEquation}\n                />\n        </div>\n    )\n}\n\nexport default Calculator\n","import React from 'react';\nimport './App.css';\n\nimport Calculator from './components/Calculator'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}